# make `make` multicore
alias make="make -j9"
alias mk="make -j9"

# cp recursive & verbose
alias cp='cp -Rv'
alias copy='rsync -aP'
# Make mv confirm before overwriting
alias mv='mv -i'

# ls
# alias ls='ls -F --human-readable'
alias l='exa -l'
alias la='exa -la'
alias ll='exa -l'
# alias la='ls -AF --human-readable'
# alias ll='ls -lhF --human-readable'
# alias l='ls -lhF --human-readable'
#alias sl='sl -aFc'
alias e='exa --long --binary --group --group-directories-first'

# git
g() {
    if [ $# -eq 0 ];
    then
        git status -sb
    else
        git "$@"
    fi
}
compdef g=git

# random
alias ping=prettyping.sh
alias showip="dig +short myip.opendns.com @resolver1.opendns.com"
alias whatyearisit='date && hostname && cat /etc/*-release && whoami && pwd'
alias pong='ping google.com'
alias pong_nodns='ping 8.8.8.8'
alias mnt='mount | column -t'
alias insult='wget http://www.randominsults.net -O - 2>/dev/null | grep \<strong\> | sed "s;^.*<i>\(.*\)</i>.*$;\1;"'
alias dmesg='dmesg -T'
alias sys='sudo systemctl'
compdef sys='systemctl'
alias vim=nvim
alias vi='vim -u NONE'
alias mpv='mpv --profile=opengl-hq'

# grep
alias grep='grep --color=auto'
alias psf='pgrep -lf'

# Misc
alias df=pydf

alias please='sudo !!'
alias starwars='telnet towel.blinkenlights.nl'

# Help for HTTP status codes
function httpcode() {
    curl http://httpcode.info/$1
}

# vim
alias :wq="echo You\'re not in vim, dummy"
alias :q="echo You\'re not in vim, dummy"

# colored man
man() {
    env \
    LESS_TERMCAP_mb=$(printf "\e[01;33m") \
    LESS_TERMCAP_md=$(printf "\e[01;33m") \
    LESS_TERMCAP_me=$(printf "\e[00m") \
    LESS_TERMCAP_se=$(printf "\e[00m") \
    LESS_TERMCAP_so=$(printf "\033[34m") \
    LESS_TERMCAP_ue=$(printf "\e[00m") \
    LESS_TERMCAP_us=$(printf "\e[04;34m") \
    man "$@"
}

# ingore output crap from graphical programs
launch() {
    nohup "$@" &>/dev/null &
    disown %
}
compdef launch='sudo'

alias okular='launch okular'
compdef okular='okular'

# alias ipython=ptipython
alias p=ptipython
alias j="/opt/julia/julia"

function factor() {
    yafu "factor($1)"
}

compdef c=cd
function c() {
    if [[ -n "$1" ]] && [[ -d "$1" ]]; then
        e $1
    fi
    cd $1
}
